(in-package :clans)

(defun envs-plist (envs)
  (let ((properties '()))
    (mapcar (lambda (entry) (let ((kv (cl-ppcre:split "=" entry)))
                              (setf (getf properties (intern (string-upcase (first kv)) :keyword))
                                    (second kv))))
            envs)
    properties))

(defun read-lines (stream)
  (loop
    for line = (read-line stream nil nil)
    while line
    collect line))

(defun get-facts (user host &key (key (concatenate 'string (uiop:getenv "HOME") "/.ssh/id_rsa")))
  (ssh:with-connection (conn host (ssh:key user (pathname key)))
    (let ((os-data (ssh:with-command (conn iostream "cat /etc/os-release")
                                     (envs-plist (read-lines iostream))))
          (properties '())
          (uname '()))
      (setf (getf uname :system) (first (ssh:with-command (conn iostream "uname -s")
                                                          (read-lines iostream))))
      (setf (getf uname :nodename) (first (ssh:with-command (conn iostream "uname -n")
                                                            (read-lines iostream))))
      (setf (getf uname :kernel-release) (first (ssh:with-command (conn iostream "uname -r")
                                                                  (read-lines iostream))))
      (setf (getf uname :kernel-version) (first (ssh:with-command (conn iostream "uname -v")
                                                                  (read-lines iostream))))
      (setf (getf uname :hardware-platform) (first (ssh:with-command (conn iostream "uname -i")
                                                                     (read-lines iostream))))
      (setf (getf uname :processor) (first (ssh:with-command (conn iostream "uname -p")
                                                             (read-lines iostream))))
      (setf (getf uname :machine) (first (ssh:with-command (conn iostream "uname -m")
                                                           (read-lines iostream))))
      (setf (getf properties :os-data) os-data)
      (setf (getf properties :uname) uname)
      properties)))

(defun -main (&rest args)
  (declare (ignorable args))
  (format t "Hello, world!~%"))
